* Thứ tự chạy các Annotation
Run BeforeSuite
	Run BeforeTest
		Run BeforeClass
			Run BeforeMethod
			Run testcase 01
			Run AfterMethod
			
			Run BeforeMethod
			Run testcase 02
			Run AfterMethod
			
			Run BeforeMethod
			Run testcase 03
			Run AfterMethod
		Run AfterClass
	Run AfterTest
Run AfterSuite


* Groups:
- Thêm tại các annotation cú pháp: (groups = "{tên group}")
- Tại file run testcase sử dụng group để chạy 1 group:
	<groups>
    	<run>
    		<include name="{tên group}"/>
    	</run>
    </groups>
    
 * alwaysRun = true
 - Sử dụng cho Before<xxx> và After<xxx>
 - Dùng để ép cho annotation luôn được thực hiện dù các step trước đã false
 
 * Priority/Skips testcase
 - Priority = 1,2,3,....
 - Skips: enabled = true/false
 
 * DataProvider (Data driven testing):
 - Tạo hàm DataProvider có tên hàm, kiểu dữ liệu là Object[][]
		Ví dụ:	 @DataProvider(name = "Login_Med247")
					public Object[][] Med247_login(){
						return new Object[][] {
							{"quangvinh@yopmail.com","Med247@"},
							{"letan_test_prefix@med247.co","Med247@"}
						};
					}
 - Tại annotation @Test, add thêm tên dataProvider được sử dụng: vd: @Test(dataProvider = "Login_Med247")
 
 * Parameter:
 - Để chạy nhiều trình duyệt, nhiều môi trường, nhiều hệ điều hành,...
 - Thêm tag <parameter /> tại file xml tại mỗi thẻ chạy test: chứa {name} và {value}
 	ví dụ:   <test name="Run on Chrome">
			  	<parameter name="browserName" value ="chrome"/>
			    <classes>
			      <class name="testng.Topic_05_Parameter"/>
			    </classes>
			  </test>
 - Tại file testcase.java: gọi annotation @parameter("browserName")
 - Xử lý logic mở nhiều trình duyệt:
 		if(browser.equals("firefox")) {
			System.setProperty("webdriver.gecko.driver", projectPath + "\\browserDrivers\\geckodriver.exe");
			driver = new FirefoxDriver();
		} else if(browser.equals("chrome")) {
			System.setProperty("webdriver.chrome.driver", projectPath + "\\browserDrivers\\chromedriver.exe");
			driver = new ChromeDriver();
		} else if(browser.equals("edge")) {
			System.setProperty("webdriver.edge.driver", projectPath + "\\browserDrivers\\msedgedriver.exe");
			driver = new EdgeDriver();
		} else {
			throw new RuntimeException("Please input your brower name!");
		}
* Optional:
- Dùng backup trong trường hợp quên không gọi parameter tại file xml
- Thêm tag @Optional("{value}") tại hàm có sử dụng parameter

* Parallel:
- Để chạy nhiều trình duyệt cùng lúc: cân nhắc khi chạy trên local vì những case di chuột, hover chuột

* Loop:
- Lặp lại testcase nhiều lần
- Cú pháp: thêm lệnh sau tại @Test: invocationCount= {number}

* Package:
- Chạy toàn bộ package
- Tại file .xml

* Dependency:
- Xác định 1 testcase phụ thuộc vào testcase nào đó: testcase được phụ thuộc phải pass thì mới thực hiện testcase phụ thuộc
- Cú pháp: thêm lệnh sau tại @Test: dependsOnMethods="{tên testcase được phụ thuộc}"

* Listener:
- Class kế thừa 1 class: extends
- Class thực hiện (kế thừa) 1 interface: implements

* So sánh TestNG và JUnit 4
- TestNG:
	+ là unit testing framework cho ngôn ngữ lập trình Java
	+ Hỗ trợ, tích hợp với các tools: ANT, Gradle, Maven
	+ Hỗ trợ các annotation: @Test, before/after class, before/after medthod, before/after Suite, before/after test, before/after group
	+ Hỗ trợ parameter, parallel, dataDriven, Group priority, multiple Threads, Loops
	=> Hỗ trợ tốt hơn khi built framework dạng Hybrid
- JUnit:
	+ là unit testing framework cho ngôn ngữ lập trình Java
	+ Hỗ trợ, tích hợp với các tools: ANT, Gradle, Maven
	+ Không hỗ trợ những phần còn lại
	=> Hỗ trợ tốt hơn khi built framework dạng Behavior (BDD)/ Cucumber
	
* TestNG plugin (Eclipse/IntelliJ) vs TestNG Library (.jar):
	+ Plugin:
		++ test Runner: Hỗ trợ để chạy 1 class test từ context menu
		++ Không phải là thư viện
	+ Library:
		++ Là thư viện bổ trợ cho việc viết code

		
				
		
		
*** Automation Testing Framework Type:
- Record Playback: những dự án ngắn hạn
- Data Driven
- Keywork
- Hybrid
- Behavier